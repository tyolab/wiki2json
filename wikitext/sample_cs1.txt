
[[File:Brute force Clique algorithm.svg|thumb|upright=1.35|The [[Brute-force search|brute force algorithm]] finds a 4-clique in this 7-vertex graph (the complement of the 7-vertex [[path graph]]) by systematically checking all [[Combination|C]](7,4)&nbsp;=&nbsp;35 4-vertex subgraphs for completeness.]]

In [[computer science]], the '''clique problem''' is the computational problem of finding [[clique (graph theory)|clique]]s (subsets of vertices, all [[Adjacent (graph theory)|adjacent]] to each other, also called [[complete graph|complete]] [[Glossary of graph theory#Subgraphs|subgraphs]]) in a [[Graph (discrete mathematics)|graph]]. It has several different formulations depending on which cliques, and what information about the cliques, should be found. Common formulations of the clique problem include finding a [[maximum clique]] (a clique with the largest possible number of vertices), finding a maximum weight clique in a weighted graph, listing all [[maximal clique]]s (cliques that cannot be enlarged), and solving the [[decision problem]] of testing whether a graph contains a clique larger than a given size.

The clique problem arises in the following real-world setting. Consider a [[social network]], where the graph's [[vertex (graph theory)|vertices]] represent people, and the graph's [[edge (graph theory)|edges]] represent mutual acquaintance. Then a clique represents a subset of people who all know each other, and algorithms for finding cliques can be used to discover these groups of mutual friends. Along with its applications in social networks, the clique problem also has many applications in [[bioinformatics]], and [[computational chemistry]].

Most versions of the clique problem are hard. The clique decision problem is [[NP-complete]] (one of [[Karp's 21 NP-complete problems]]). The problem of finding the maximum clique is both [[parameterized complexity|fixed-parameter intractable]] and [[hardness of approximation|hard to approximate]]. And, listing all maximal cliques may require [[exponential time]] as there exist graphs with exponentially many maximal cliques. Therefore, much of the theory about the clique problem is devoted to identifying special types of graph that admit more efficient algorithms, or to establishing the computational difficulty of the general problem in various models of computation.

To find a maximum clique, one can systematically inspect all subsets, but this sort of [[brute-force search]] is too time-consuming to be practical for networks comprising more than a few dozen vertices.
Although no [[polynomial time]] algorithm is known for this problem, more efficient [[algorithm]]s than the brute-force search are known. For instance, the [[Bron–Kerbosch algorithm]] can be used to list all maximal cliques in worst-case optimal time, and it is also possible to list them in polynomial time per clique.

==History and applications==
The study of complete subgraphs in mathematics predates the "clique" terminology. For instance, complete subgraphs make an early appearance in the mathematical literature in the graph-theoretic reformulation of [[Ramsey theory]] by {{harvtxt|Erdős|Szekeres|1935}}. But the term "clique" and the problem of algorithmically listing cliques both come from the social sciences, where complete subgraphs are used to model [[clique|social cliques]], groups of people who all know each other. {{harvtxt|Luce|Perry|1949}} used graphs to model social networks, and adapted the social science terminology to graph theory. They were the first to call complete subgraphs "cliques". The first algorithm for solving the clique problem is that of {{harvtxt|Harary|Ross|1957}},<ref name="bbpp">{{harvtxt|Bomze|Budinich|Pardalos|Pelillo|1999}}; {{harvtxt|Gutin|2004}}.</ref> who were motivated by the sociological application. Social science researchers have also defined various other types of cliques and maximal cliques in social network, "cohesive subgroups" of people or actors in the network all of whom share one of several different kinds of connectivity relation. Many of these generalized notions of cliques can also be found by constructing an undirected graph whose edges represent related pairs of actors from the social network, and then applying an algorithm for the clique problem to this graph.{{sfnp|Wasserman|Faust|1994}}

Since the work of Harary and Ross, many others have devised algorithms for various versions of the clique problem.<ref name="bbpp"/> In the 1970s, researchers began studying these algorithms from the point of view of [[worst-case analysis]]. See, for instance, {{harvtxt|Tarjan|Trojanowski|1977}}, an early work on the worst-case complexity of the maximum clique problem. Also in the 1970s, beginning with the work of {{harvtxt|Cook|1971}} and {{harvtxt|Karp|1972}}, researchers began using the theory of [[NP-complete]]ness and related intractability results to provide a mathematical explanation for the perceived difficulty of the clique problem. In the 1990s, a breakthrough series of papers beginning with {{harvtxt|Feige|Goldwasser|Lovász|Safra|1991}} and reported in ''[[The New York Times]]'',{{sfnp|Kolata|1990}} showed that (assuming [[P ≠ NP]]) it is not even possible to [[approximation algorithm|approximate]] the problem accurately and efficiently.

Clique-finding algorithms have been used in [[chemistry]], to find chemicals that match a target structure{{sfnp|Rhodes|Willett|Calvet|Dunbar|2003}} and to model [[Docking (molecular)|molecular docking]] and the binding sites of chemical reactions.{{sfnp|Kuhl|Crippen|Friesen|1983}} They can also be used to find similar structures within different molecules.<ref>{{harvtxt|National Research Council Committee on Mathematical Challenges from Computational Chemistry|1995}}. See in particular [https://books.google.com/books?id=YkArAAAAYAAJ&pg=PA35 pp.&nbsp;35–36].</ref> In these applications, one forms a graph in which each vertex represents a matched pair of atoms, one from each of two molecules. Two vertices are connected by an edge if the matches that they represent are compatible with each other. Being compatible may mean, for instance, that the distances between the atoms within the two molecules are approximately equal, to within some given tolerance. A clique in this graph represents a set of matched pairs of atoms in which all the matches are compatible with each other.<ref>{{harvtxt|Muegge|Rarey|2001}}. See in particular [https://books.google.com/books?id=luNYUUfBQb4C&pg=PA6 pp.&nbsp;6–7].</ref> A special case of this method is the use of the [[modular product of graphs]] to reduce the problem of finding the [[maximum common induced subgraph]] of two graphs to the problem of finding a maximum clique in their product.{{sfnp|Barrow|Burstall|1976}}

In [[automatic test pattern generation]], finding cliques can help to bound the size of a test set.{{sfnp|Hamzaoglu|Patel|1998}} In [[bioinformatics]], clique-finding algorithms have been used to infer [[evolutionary tree]]s,{{sfnp|Day|Sankoff|1986}} [[protein structure prediction|predict protein structures]],{{sfnp|Samudrala|Moult|1998}} and find closely interacting clusters of proteins.{{sfnp|Spirin|Mirny|2003}} Listing the cliques in a [[dependency graph]] is an important step in the analysis of certain random processes.{{sfnp|Frank|Strauss|1986}} In mathematics, [[Keller's conjecture]] on face-to-face tiling of [[hypercube]]s was disproved by {{harvtxt|Lagarias|Shor|1992}}, who used a clique-finding algorithm on an associated graph to find a counterexample.<ref>The Keller graph used by {{harvtxt|Lagarias|Shor|1992}} has 1048576 vertices and clique size 1024. They described a synthetic construction for the clique, but also used clique-finding algorithms on smaller graphs to help guide their search. {{harvtxt|Mackey|2002}} simplified the proof by finding a clique of size 256 in a 65536-vertex Keller graph.</ref>

==Definitions==
{{Main|Clique (graph theory)}}
[[File:6n-graf-clique.svg|thumb|The graph shown has one maximum clique, the triangle {1,2,5}, and four more maximal cliques, the pairs {2,3}, {3,4}, {4,5}, and {4,6}.]]
An [[undirected graph]] is formed by a [[finite set]] of [[vertex (graph theory)|vertices]] and a set of [[unordered pair]]s of vertices, which are called [[edge (graph theory)|edges]]. By convention, in algorithm analysis, the number of vertices in the graph is denoted by {{mvar|n}} and the number of edges is denoted by {{mvar|m}}. A [[clique (graph theory)|clique]] in a graph {{mvar|G}} is a [[complete graph|complete]] [[Glossary of graph theory#Subgraphs|subgraph]] of {{mvar|G}}. That is, it is a subset {{mvar|K}} of the vertices such that every two vertices in {{mvar|K}} are the two endpoints of an edge in {{mvar|G}}. A [[maximal clique]] is a clique to which no more vertices can be added. For each vertex {{mvar|v}} that is not part of a maximal clique, there must be another vertex {{mvar|w}} that is in the clique and non-adjacent to {{mvar|v}}, preventing {{mvar|v}} from being added to the clique. A [[maximum clique]] is a clique that includes the largest possible number of vertices. The clique number {{math|''ω''(''G'')}} is the number of vertices in a maximum clique of {{mvar|G}}.<ref name="bbpp"/>

Several closely related clique-finding problems have been studied.<ref name="v02p09">{{harvtxt|Valiente|2002}}; {{harvtxt|Pelillo|2009}}.</ref>
*In the maximum clique problem, the input is an undirected graph, and the output is a maximum clique in the graph. If there are multiple maximum cliques, one of them may be chosen arbitrarily.<ref name="v02p09"/>
*In the weighted maximum clique problem, the input is an undirected graph with weights on its vertices (or, less frequently, edges) and the output is a clique with maximum total weight. The maximum clique problem is the special case in which all weights are equal.{{sfnp|Pelillo|2009}} As well as the problem of optimizing the sum of weights, other more complicated bicriterion optimization problems have also been studied.{{sfnp|Sethuraman|Butenko|2015}}
*In the maximal clique listing problem, the input is an undirected graph, and the output is a list of all its maximal cliques. The maximum clique problem may be solved using as a subroutine an algorithm for the maximal clique listing problem, because the maximum clique must be included among all the maximal cliques.{{sfnp|Valiente|2002}}
*In the {{mvar|k}}-clique problem, the input is an undirected graph and a number {{mvar|k}}. The output is a clique with {{mvar|k}} vertices, if one exists, or a special value indicating that there is no {{mvar|k}}-clique otherwise. In some variations of this problem, the output should list all cliques of size {{mvar|k}}.<ref name="CN85"/>
*In the clique decision problem, the input is an undirected graph and a number {{mvar|k}}, and the output is a [[truth value|Boolean value]]: true if the graph contains a {{mvar|k}}-clique, and false otherwise.{{sfnp|Cormen|Leiserson|Rivest|Stein|2001}}
The first four of these problems are all important in practical applications. The clique decision problem is not of practical importance; it is formulated in this way in order to apply the theory of [[NP-completeness]] to clique-finding problems.{{sfnp|Cormen|Leiserson|Rivest|Stein|2001}}

The clique problem and the [[independent set problem]] are complementary: a clique in {{mvar|G}} is an independent set in the [[complement graph]] of {{mvar|G}} and vice versa.<ref>{{harvtxt|Cormen|Leiserson|Rivest|Stein|2001}}, Exercise 34-1, p.&nbsp;1018.</ref> Therefore, many computational results may be applied equally well to either problem, and some research papers do not clearly distinguish between the two problems. However, the two problems have different properties when applied to restricted families of graphs. For instance, the clique problem may be solved in polynomial time for [[planar graph]]s<ref name="planar">{{harvtxt|Papadimitriou|Yannakakis|1981}}; {{harvtxt|Chiba|Nishizeki|1985}}.</ref> while the independent set problem remains NP-hard on planar graphs.{{sfnp|Garey|Johnson|Stockmeyer|1976}}

==Algorithms==

===Finding a single maximal clique===
A [[maximal element|maximal]] clique, sometimes called inclusion-maximal, is a clique that is not included in a larger clique.  Therefore, every clique is contained in a maximal clique.<ref>See, e.g., {{harvtxt|Frank|Strauss|1986}}.</ref> Maximal cliques can be very small.  A graph may contain a non-maximal clique with many vertices and a separate clique of size 2 which is maximal.  While a maximum (i.e., largest) clique is necessarily maximal, the converse does not hold.  There are some types of graphs in which every maximal clique is maximum; these are the [[complement (graph theory)|complements]] of the [[well-covered graph]]s, in which every maximal independent set is maximum.{{sfnp|Plummer|1993}} However, other graphs have maximal cliques that are not maximum.

A single maximal clique can be found by a straightforward [[greedy algorithm]]. Starting with an arbitrary clique (for instance, any single vertex or even the empty set), grow the current clique one vertex at a time by looping through the graph's remaining vertices. For each vertex {{mvar|v}} that this loop examines, add {{mvar|v}} to the clique if it is adjacent to every vertex that is already in the clique, and discard {{mvar|v}} otherwise. This algorithm runs in [[linear time]].<ref>{{harvtxt|Skiena|2009}}, [https://books.google.com/books?id=7XUSn0IKQEgC&pg=PA526 p.&nbsp;526].</ref>  Because of the ease of finding maximal cliques, and their potential small size,  more attention has been given to the much harder algorithmic problem of finding a maximum or otherwise large clique. However, some research in [[parallel algorithm]]s has studied the problem of finding a maximal clique. In particular, the problem of finding the [[lexicographic ordering|lexicographically first]] maximal clique (the one found by the algorithm above) has been shown to be [[Complete (complexity)|complete]] for [[FP (complexity)|the class of polynomial-time functions]]. This result implies that the problem is unlikely to be solvable within the parallel complexity class [[NC (complexity)|NC]].{{sfnp|Cook|1985}}

===Cliques of fixed size===
One can test whether a graph {{mvar|G}} contains a {{mvar|k}}-vertex clique, and find any such clique that it contains, using a [[brute-force search|brute force algorithm]]. This algorithm examines each subgraph with {{mvar|k}} vertices and checks to see whether it forms a clique. It takes time {{math|{{italics correction|''O''}}(''n''<sup>''k''</sup>&nbsp;''k''<sup>2</sup>)}}, as expressed using [[big O notation]].
This is because there are {{math|{{italics correction|''O''}}(''n''<sup>''k''</sup>)}} subgraphs to check, each of which has {{math|{{italics correction|''O''}}(''k''<sup>2</sup>)}} edges whose presence in {{mvar|G}} needs to be checked. Thus, the problem may be solved in [[polynomial time]] whenever {{mvar|k}} is a fixed constant. However, when {{mvar|k}} does not have a fixed value, but instead may vary as part of the input to the problem, the time is exponential.<ref>E.g., see {{harvtxt|Downey|Fellows|1995}}.</ref>

The simplest nontrivial case of the clique-finding problem is finding a triangle in a graph, or equivalently determining whether the graph is [[triangle-free graph|triangle-free]].
In a graph {{mvar|G}} with {{mvar|m}} edges, there may be at most {{math|Θ(''m''<sup>3/2</sup>)}} triangles (using [[big theta notation]] to indicate that this bound is tight). The worst case for this formula occurs when {{mvar|G}} is itself a clique. Therefore, algorithms for listing all triangles must take at least {{math|Ω(''m''<sup>3/2</sup>)}} time in the worst case (using [[big omega notation]]), and algorithms are known that match this time bound.<ref>{{harvtxt|Itai|Rodeh|1978}} provide an algorithm with {{math|{{italics correction|''O''}}(''m''<sup>3/2</sup>)}} running time that finds a triangle if one exists but does not list all triangles; {{harvtxt|Chiba|Nishizeki|1985}} list all triangles in time {{math|{{italics correction|''O''}}(''m''<sup>3/2</sup>)}}.</ref> For instance, {{harvtxt|Chiba|Nishizeki|1985}} describe an algorithm that sorts the vertices in order from highest degree to lowest and then iterates through each vertex {{mvar|v}} in the sorted list, looking for triangles that include {{mvar|v}} and do not include any previous vertex in the list. To do so the algorithm marks all neighbors of {{mvar|v}}, searches through all edges incident to a neighbor of {{mvar|v}} outputting a triangle for every edge that has two marked endpoints, and then removes the marks and deletes {{mvar|v}} from the graph. As the authors show, the time for this algorithm is proportional to the [[arboricity]] of the graph (denoted {{math|''a''(''G'')}}) multiplied by the number of edges, which is {{math|{{italics correction|''O''}}(''m''&nbsp;''a''(''G''))}}. Since the arboricity is at most {{math|{{italics correction|''O''}}(''m''<sup>1/2</sup>)}}, this algorithm runs in time {{math|{{italics correction|''O''}}(''m''<sup>3/2</sup>)}}. More generally, all {{mvar|k}}-vertex cliques can be listed by a similar algorithm that takes time proportional to the number of edges multiplied by the arboricity to the power {{math|(''k''&nbsp;&minus;&nbsp;2)}}. For graphs of constant arboricity, such as planar graphs (or in general graphs from any non-trivial [[minor-closed graph family]]), this algorithm takes {{math|{{italics correction|''O''}}(''m'')}} time, which is optimal since it is linear in the size of the input.<ref name="CN85">{{harvtxt|Chiba|Nishizeki|1985}}.</ref>

If one desires only a single triangle, or an assurance that the graph is triangle-free, faster algorithms are possible. As {{harvtxt|Itai|Rodeh|1978}} observe, the graph contains a triangle if and only if its [[adjacency matrix]] and the square of the adjacency matrix contain nonzero entries in the same cell. Therefore, [[Computational complexity of matrix multiplication|fast matrix multiplication]] techniques can be applied to find triangles in time {{math|{{italics correction|''O''}}(''n''<sup>2.376</sup>)}}. {{harvtxt|Alon|Yuster|Zwick|1994}} used fast matrix multiplication to improve the {{math|{{italics correction|''O''}}(''m''<sup>3/2</sup>)}} algorithm for finding triangles to {{math|{{italics correction|''O''}}(''m''<sup>1.41</sup>)}}. These algorithms based on fast matrix multiplication have also been extended to problems of finding {{mvar|k}}-cliques for larger values of {{mvar|k}}.<ref>{{harvtxt|Eisenbrand|Grandoni|2004}}; {{harvtxt|Kloks|Kratsch|Müller|2000}}; {{harvtxt|Nešetřil|Poljak|1985}}; {{harvtxt|Vassilevska|Williams|2009}}; {{harvtxt|Yuster|2006}}.</ref>

===Listing all maximal cliques===
By a result of {{harvtxt|Moon|Moser|1965}}, every {{mvar|n}}-vertex graph has at most {{math|3<sup>''n''/3</sup>}} maximal cliques. They can be listed by the [[Bron–Kerbosch algorithm]], a recursive [[backtracking]] procedure of {{harvtxt|Bron|Kerbosch|1973}}. The main recursive subroutine of this procedure has three arguments: a partially constructed (non-maximal) clique, a set of candidate vertices that could be added to the clique, and another set of vertices that should not be added (because doing so would lead to a clique that has already been found). The algorithm tries adding the candidate vertices one by one to the partial clique, making a recursive call for each one. After trying each of these vertices, it moves it to the set of vertices that should not be added again. Variants of this algorithm can be shown to have worst-case running time {{math|{{italics correction|''O''}}(3<sup>''n''/3</sup>)}}, matching the number of cliques that might need to be listed.{{sfnp|Tomita|Tanaka|Takahashi|2006}} Therefore, this provides a worst-case-optimal solution to the problem of listing all maximal cliques. Further, the Bron–Kerbosch algorithm has been widely reported as being faster in practice than its alternatives.<ref>{{harvtxt|Cazals|Karande|2008}}; {{harvtxt|Eppstein|Löffler|Strash|2013}}.</ref>

However, when the number of cliques is significantly smaller than its worst case, other algorithms might be preferable. As {{harvtxt|Tsukiyama|Ide|Ariyoshi|Shirakawa|1977}} showed, it is also possible to list all maximal cliques in a graph in an amount of time that is polynomial per generated clique. An algorithm such as theirs in which the running time depends on the output size is known as an [[output-sensitive algorithm]]. Their algorithm is based on the following two observations, relating the maximal cliques of the given graph {{mvar|G}} to the maximal cliques of a graph {{math|''G''&nbsp;\&nbsp;''v''}} formed by removing an arbitrary vertex {{mvar|v}} from {{mvar|G}}:
*For every maximal clique {{mvar|K}} of {{math|''G''&nbsp;\&nbsp;''v''}}, either {{mvar|K}} continues to form a maximal clique in {{mvar|G}}, or {{math|''K''&nbsp;⋃&nbsp;{''v''} }} forms a maximal clique in {{mvar|G}}. Therefore, {{mvar|G}} has at least as many maximal cliques as {{math|''G''&nbsp;\&nbsp;''v''}} does.
*Each maximal clique in {{mvar|G}} that does not contain {{mvar|v}} is a maximal clique in {{math|''G''&nbsp;\&nbsp;''v''}}, and each maximal clique in {{mvar|G}} that does contain {{mvar|v}} can be formed from a maximal clique {{mvar|K}} in {{math|''G''&nbsp;\&nbsp;''v''}} by adding {{mvar|v}} and removing the non-neighbors of {{mvar|v}} from {{mvar|K}}.
Using these observations they can generate all maximal cliques in {{mvar|G}} by a recursive algorithm that chooses a vertex {{mvar|v}} arbitrarily and then, for each maximal clique {{mvar|K}} in {{math|''G''&nbsp;\&nbsp;''v''}}, outputs both {{mvar|K}} and the clique formed by adding {{mvar|v}} to {{mvar|K}} and removing the non-neighbors of {{mvar|v}}. However, some cliques of {{mvar|G}} may be generated in this way from more than one parent clique of {{math|''G''&nbsp;\&nbsp;''v''}}, so they eliminate duplicates by outputting a clique in {{mvar|G}} only when its parent in {{math|''G''&nbsp;\&nbsp;''v''}} is lexicographically maximum among all possible parent cliques. On the basis of this principle, they show that all maximal cliques in {{mvar|G}} may be generated in time {{math|{{italics correction|''O''}}(''mn'')}} per clique, where {{mvar|m}} is the number of edges in {{mvar|G}} and {{mvar|n}} is the number of vertices. {{harvtxt|Chiba|Nishizeki|1985}} improve this to {{math|O(''ma'')}} per clique, where {{mvar|a}} is the arboricity of the given graph. {{harvtxt|Makino|Uno|2004}} provide an alternative output-sensitive algorithm based on fast matrix multiplication. {{harvtxt|Johnson|Yannakakis|1988}} show that it is even possible to list all maximal cliques in [[lexicographic order]] with [[polynomial delay]] per clique. However, the choice of ordering is important for the efficiency of this algorithm: for the reverse of this order,
there is no polynomial-delay algorithm unless [[P = NP]].

On the basis of this result, it is possible to list all maximal cliques in polynomial time, for families of graphs in which the number of cliques is polynomially bounded. These families include [[chordal graph]]s, [[complete graph]]s, [[triangle-free graph]]s, [[interval graph]]s, graphs of bounded [[boxicity]], and [[planar graph]]s.{{sfnp|Rosgen|Stewart|2007}} In particular, the planar graphs have {{math|{{italics correction|''O''}}(''n'')}} cliques, of at most constant size, that can be listed in linear time. The same is true for any family of graphs that is both [[dense graph|sparse]] (having a number of edges at most a constant times the number of vertices) and [[Closure (mathematics)|closed]] under the operation of taking subgraphs.<ref name="CN85"/><ref name="ELS10"/>

===Finding maximum cliques in arbitrary graphs===
It is possible to find the maximum clique, or the clique number, of an arbitrary ''n''-vertex graph in time {{math|1={{italics correction|''O''}}(3<sup>''n''/3</sup>) = {{italics correction|''O''}}(1.4422<sup>''n''</sup>)}} by using one of the algorithms described above to list all maximal cliques in the graph and returning the largest one. However, for this variant of the clique problem better worst-case time bounds are possible. The algorithm of {{harvtxt|Tarjan|Trojanowski|1977}} solves this problem in time {{math|1={{italics correction|''O''}}(2<sup>''n''/3</sup>) = {{italics correction|''O''}}(1.2599<sup>''n''</sup>)}}. It is a recursive backtracking scheme similar to that of the [[Bron–Kerbosch algorithm]], but is able to eliminate some recursive calls when it can be shown that the cliques found within the call will be suboptimal. {{harvtxt|Jian|1986}} improved the time to {{math|1={{italics correction|''O''}}(2<sup>0.304''n''</sup>) = {{italics correction|''O''}}(1.2346<sup>''n''</sup>)}}, and {{harvtxt|Robson|1986}} improved it to {{math|1={{italics correction|''O''}}(2<sup>0.276''n''</sup>) = {{italics correction|''O''}}(1.2108<sup>''n''</sup>)}} time, at the expense of greater space usage. Robson's algorithm combines a similar backtracking scheme (with a more complicated case analysis) and a [[dynamic programming]] technique in which the optimal solution is precomputed for all small connected subgraphs of the [[complement graph]]. These partial solutions are used to shortcut the backtracking recursion. The fastest algorithm known today is a refined version of this method by {{harvtxt|Robson|2001}} which runs in time {{math|1={{italics correction|''O''}}(2<sup>0.249''n''</sup>) = {{italics correction|''O''}}(1.1888<sup>''n''</sup>)}}.{{sfnp|Robson|2001}}

There has also been extensive research on [[heuristic algorithm]]s for solving maximum clique problems without worst-case runtime guarantees, based on methods including [[branch and bound]],<ref>{{harvtxt|Balas|Yu|1986}}; {{harvtxt|Carraghan|Pardalos|1990}}; {{harvtxt|Pardalos|Rogers|1992}}; {{harvtxt|Östergård|2002}}; {{harvtxt|Fahle|2002}}; {{harvtxt|Tomita|Seki|2003}}; {{harvtxt|Tomita|Kameda|2007}}; {{harvtxt|Konc|Janežič|2007}}.</ref> [[Local search (optimization)|local search]],<ref>{{harvtxt|Battiti|Protasi|2001}}; {{harvtxt|Katayama|Hamamoto|Narihisa|2005}}.</ref> [[greedy algorithm]]s,<ref>{{harvtxt|Abello|Pardalos|Resende|1999}}; {{harvtxt|Grosso|Locatelli|Della Croce|2004}}.</ref> and [[constraint programming]].{{sfnp|Régin|2003}} Non-standard computing methodologies that have been suggested for finding cliques include [[DNA computing]]<ref>{{harvtxt|Ouyang|Kaplan|Liu|Libchaber|1997}}. Although the title refers to maximal cliques, the problem this paper solves is actually the maximum clique problem.</ref> and [[adiabatic quantum computation]].{{sfnp|Childs|Farhi|Goldstone|Gutmann|2002}} The maximum clique problem was the subject of an implementation challenge sponsored by [[DIMACS]] in 1992–1993,{{sfnp|Johnson|Trick|1996}} and a collection of graphs used as benchmarks for the challenge, which is publicly available.<ref>[http://dimacs.rutgers.edu/pub/challenge/graph/benchmarks/clique/ DIMACS challenge graphs for the clique problem] {{Webarchive|url=https://web.archive.org/web/20180330210743/http://dimacs.rutgers.edu/pub/challenge/graph/benchmarks/clique/ |date=2018-03-30 }}, accessed 2009-12-17.</ref>

===Special classes of graphs===
[[File:Permutation graph.svg|thumb|In this [[permutation graph]], the maximum cliques correspond to the [[Longest increasing subsequence|longest decreasing subsequences]] (4,3,1) and (4,3,2) of the defining permutation.]]
[[Planar graph]]s, and other families of sparse graphs, have been discussed above: they have linearly many maximal cliques, of bounded size, that can be listed in linear time.<ref name="CN85"/> In particular, for planar graphs, any clique can have at most four vertices, by [[Kuratowski's theorem]].<ref name="planar"/>

[[Perfect graph]]s are defined by the properties that their clique number equals their [[chromatic number]], and that this equality holds also in each of their [[induced subgraph]]s. For perfect graphs, it is possible to find a maximum clique in polynomial time, using an algorithm based on [[semidefinite programming]].{{sfnp|Grötschel|Lovász|Schrijver|1988}}
However, this method is complex and non-combinatorial, and specialized clique-finding algorithms have been developed for many subclasses of perfect graphs.{{sfnp|Golumbic|1980}} In the [[complement graph]]s of [[bipartite graph]]s, [[Kőnig's theorem (graph theory)|Kőnig's theorem]] allows the maximum clique problem to be solved using techniques for [[Matching (graph theory)|matching]]. In another class of perfect graphs, the [[permutation graph]]s, a maximum clique is a [[Longest increasing subsequence|longest decreasing subsequence]] of the permutation defining the graph and can be found using known algorithms for the longest decreasing subsequence problem. Conversely, every instance of the longest decreasing subsequence problem can be described equivalently as a problem of finding a maximum clique in a permutation graph.<ref>{{harvtxt|Golumbic|1980}}, p. 159.</ref> {{harvtxt|Even|Pnueli|Lempel|1972}} provide an alternative quadratic-time algorithm for maximum cliques in [[comparability graph]]s, a broader class of perfect graphs that includes the permutation graphs as a special case.{{sfnp|Even|Pnueli|Lempel|1972}} In [[chordal graph]]s, the maximal cliques can be found by listing the vertices in an elimination ordering, and checking the clique [[neighborhood (graph theory)|neighborhoods]] of each vertex in this ordering.<ref>{{harvtxt|Blair|Peyton|1993}}, Lemma 4.5, p.&nbsp;19.</ref>

In some cases, these algorithms can be extended to other, non-perfect, classes of graphs as well. For instance, in a [[circle graph]], the neighborhood of each vertex is a permutation graph, so a maximum clique in a circle graph can be found by applying the permutation graph algorithm to each neighborhood.<ref>{{harvtxt|Gavril|1973}}; {{harvtxt|Golumbic|1980}}, p. 247.</ref> Similarly, in a [[unit disk graph]] (with a known geometric representation), there is a polynomial time algorithm for maximum cliques based on applying the algorithm for complements of bipartite graphs to shared neighborhoods of pairs of vertices.{{sfnp|Clark|Colbourn|Johnson|1990}}

The algorithmic problem of finding a maximum clique in a [[random graph]] drawn from the [[Erdős–Rényi model]] (in which each edge appears with probability {{math|1/2}}, independently from the other edges) was suggested by {{harvtxt|Karp|1976}}. Because the maximum clique in a random graph has logarithmic size with high probability, it
can be found by a brute force search in expected time {{math|2<sup>{{italics correction|''O''}}(log<sup>2</sup>''n'')</sup>}}. This is a [[Time complexity|quasi-polynomial time bound]].{{sfnp|Song|2015}} Although the clique number of such graphs is usually very close to {{math|2&nbsp;log<sub>2</sub>''n''}}, simple [[greedy algorithm]]s as well as more sophisticated randomized approximation techniques only find cliques with size {{math|log<sub>2</sub>''n''}}, half as big. The number of maximal cliques in such graphs is with high probability exponential in {{math|log<sup>2</sup>''n''}}, which prevents methods that list all maximal cliques from running in polynomial time.{{sfnp|Jerrum|1992}} Because of the difficulty of this problem, several authors have investigated the [[planted clique]] problem, the clique problem on random graphs that have been augmented by adding large cliques.<ref>{{harvtxt|Arora|Barak|2009}}, Example 18.2, pp.&nbsp;362–363.</ref> While [[Spectral graph theory|spectral methods]]{{sfnp|Alon|Krivelevich|Sudakov|1998}} and [[semidefinite programming]]{{sfnp|Feige|Krauthgamer|2000}} can detect hidden cliques of size {{math|Ω({{radic|''n''}})}}, no polynomial-time algorithms are currently known to detect those of size {{math|''o''({{radic|''n''}})}} (expressed using [[Big O notation#Little-o notation|little-o notation]]).{{sfnp|Meka|Potechin|Wigderson|2015}}

===Approximation algorithms===
Several authors have considered [[approximation algorithm]]s that attempt to find a clique or independent set that, although not maximum, has size as close to the maximum as can be found in polynomial time. Although much of this work has focused on independent sets in sparse graphs, a case that does not make sense for the complementary clique problem, there has also been work on approximation algorithms that do not use such sparsity assumptions.<ref>{{harvtxt|Boppana|Halldórsson|1992}}; {{harvtxt|Feige|2004}}; {{harvtxt|Halldórsson|2000}}.</ref>

{{harvtxt|Feige|2004}} describes a polynomial time algorithm that finds a clique of size {{math|Ω((log&nbsp;''n''/log&nbsp;log&nbsp;''n'')<sup>2</sup>)}} in any graph that has clique number {{math|Ω(''n''/log<sup>''k''</sup>''n'')}} for any constant {{mvar|k}}. By using this algorithm when the clique number of a given input graph is between {{math|''n''/log&nbsp;''n''}} and {{math|''n''/log<sup>3</sup>''n''}}, switching to a different algorithm of {{harvtxt|Boppana|Halldórsson|1992}} for graphs with higher clique numbers, and choosing a two-vertex clique if both algorithms fail to find anything, [[Uriel Feige|Feige]] provides an approximation algorithm that finds a clique with a number of vertices within a factor of {{math|O(''n''(log&nbsp;log&nbsp;''n'')<sup>2</sup>/log<sup>3</sup>''n'')}} of the maximum. Although the [[approximation ratio]] of this algorithm is weak, it is the best known to date.<ref>{{harvtxt|Liu|Lu|Yang|Xiao|2015}}: "In terms of the number of vertices in graphs, Feige shows the currently known best approximation ratio". Liu et al. are writing about the [[maximum independent set]] but for purposes of approximation there is no difference between the two problems.</ref> The results on [[hardness of approximation]] described below suggest that there can be no approximation algorithm with an approximation ratio significantly less than linear.

==Lower bounds==

===NP-completeness===
[[File:Sat reduced to Clique from Sipser.svg|thumb|The 3-CNF Satisfiability instance (x ∨ x ∨ y) ∧ (~x ∨ ~y ∨ ~y) ∧ (~x ∨ y ∨ y) reduced to Clique. The green vertices form a 3-clique and correspond to a satisfying assignment.<ref>Adapted from {{harvtxt|Sipser|1996}}</ref>]]
The clique decision problem is [[NP-complete]]. It was one of [[Karp's 21 NP-complete problems|Richard Karp's original 21 problems]] shown NP-complete in his 1972 paper "Reducibility Among Combinatorial Problems".{{sfnp|Karp|1972}}  This problem was also mentioned in [[Stephen Cook]]'s paper introducing the theory of NP-complete problems.{{sfnp|Cook|1971}} Because of the hardness of the decision problem, the problem of finding a maximum clique is also NP-hard. If one could solve it, one could also solve the decision problem, by comparing the size of the maximum clique to the size parameter given as input in the decision problem.

Karp's NP-completeness proof is a [[many-one reduction]] from the [[Boolean satisfiability problem]]. It describes how to translate Boolean formulas in [[conjunctive normal form]] (CNF) into equivalent instances of the maximum clique problem.<ref>{{harvtxt|Cook|1971}} gives essentially the same reduction, from [[3-SAT]] instead of Satisfiability, to show that [[subgraph isomorphism]] is NP-complete.</ref> Satisfiability, in turn, was proved NP-complete in the [[Cook–Levin theorem]]. From a given CNF formula, Karp forms a graph that has a vertex for every pair {{math|(''v'',''c'')}}, where {{mvar|v}} is a variable or its negation and {{mvar|c}} is a clause in the formula that contains {{mvar|v}}. Two of these vertices are connected by an edge if they represent compatible variable assignments for different clauses. That is, there is an edge from {{math|(''v'',''c'')}} to {{math|(''u'',''d'')}} whenever {{math|''c''&nbsp;≠&nbsp;''d''}} and {{mvar|u}} and {{mvar|v}} are not each other's negations. If {{mvar|k}} denotes the number of clauses in the CNF formula, then the {{mvar|k}}-vertex cliques in this graph represent consistent ways of assigning [[truth values]] to some of its variables in order to satisfy the formula. Therefore, the formula is satisfiable if and only if a {{mvar|k}}-vertex clique exists.{{sfnp|Karp|1972}}

Some NP-complete problems (such as the [[travelling salesman problem]] in [[planar graph]]s) may be solved in time that is exponential in a sublinear function of the input size parameter {{mvar|n}}, significantly faster than a brute-force search.<ref>{{harvtxt|Lipton|Tarjan|1980}}.</ref> However, it is unlikely that such a subexponential time bound is possible for the clique problem in arbitrary graphs, as it would imply similarly subexponential bounds for many other standard NP-complete problems.{{sfnp|Impagliazzo|Paturi|Zane|2001}}

===Circuit complexity===
[[File:Monotone circuit for 3-clique.svg|thumb|A monotone circuit to detect a {{mvar|k}}-clique in an {{mvar|n}}-vertex graph for {{math|1=''k''&nbsp;=&nbsp;3}} and {{math|1=''n''&nbsp;=&nbsp;4}}. Each input to the circuit encodes the presence or absence of a particular (red) edge in the graph. The circuit uses one internal and-gate to detect each potential {{mvar|k}}-clique.]]
The computational difficulty of the clique problem has led it to be used to prove several lower bounds in [[circuit complexity]]. The existence of a clique of a given size is a [[Hereditary property|monotone graph property]], meaning that, if a clique exists in a given graph, it will exist in any [[Glossary of graph theory terms#supergraph|supergraph]]. Because this property is monotone, there must exist a monotone circuit, using only [[and gate]]s and [[or gate]]s, to solve the clique decision problem for a given fixed clique size. However, the size of these circuits can be proven to be a super-polynomial function of the number of vertices and the clique size, exponential in the cube root of the number of vertices.<ref>{{harvtxt|Alon|Boppana|1987}}. For earlier and weaker bounds on monotone circuits for the clique problem, see {{harvtxt|Valiant|1983}} and {{harvtxt|Razborov|1985}}.</ref> Even if a small number of [[NOT gate]]s are allowed, the complexity remains superpolynomial.<ref>{{harvtxt|Amano|Maruoka|2005}}.</ref> Additionally, the depth of a monotone circuit for the clique problem using gates of bounded [[fan-in]] must be at least a polynomial in the clique size.<ref>{{harvtxt|Goldmann|Håstad|1992}} used [[communication complexity]] to prove this result.</ref>

===Decision tree complexity===

[[File:Decision tree for 3-clique no arrowheads.svg|thumb|A simple decision tree to detect the presence of a 3-clique in a 4-vertex graph. It uses up to 6 questions of the form "Does the red edge exist?", matching the optimal bound ''n''(''n''&nbsp;&minus;&nbsp;1)/2.]]
The (deterministic) [[decision tree complexity]] of determining a [[graph property]] is the number of questions of the form "Is there an edge between vertex {{mvar|u}} and vertex {{mvar|v}}?" that have to be answered in the worst case to determine whether a graph has a particular property. That is, it is the minimum height of a boolean [[Decision tree model|decision tree]] for the problem. There are {{math|''n''(''n''&nbsp;&minus;&nbsp;1)/2}} possible questions to be asked. Therefore, any graph property can be determined with at most {{math|''n''(''n''&nbsp;&minus;&nbsp;1)/2}} questions. It is also possible to define random and quantum decision tree complexity of a property, the expected number of questions (for a worst case input) that a randomized or quantum algorithm needs to have answered in order to correctly determine whether the given graph has the property.<ref>See {{harvtxt|Arora|Barak|2009}}, Chapter 12, "Decision trees", pp. 259–269.</ref>

Because the property of containing a clique is monotone, it is covered by the [[Aanderaa–Karp–Rosenberg conjecture]], which states that the deterministic decision tree complexity of determining any non-trivial monotone graph property is exactly {{math|''n''(''n''&nbsp;&minus;&nbsp;1)/2}}. For arbitrary monotone graph properties, this conjecture remains unproven. However, for deterministic decision trees, and for any {{mvar|k}} in the range {{math|2 ≤ ''k'' ≤ ''n''}},  the property of containing a {{mvar|k}}-clique was shown to have decision tree complexity exactly {{math|''n''(''n''&nbsp;&minus;&nbsp;1)/2}} by {{Harvtxt|Bollobás|1976}}. Deterministic decision trees also require exponential size to detect cliques, or large polynomial size to detect cliques of bounded size.<ref>{{harvtxt|Wegener|1988}}.</ref>

The Aanderaa–Karp–Rosenberg conjecture also states that the randomized decision tree complexity of non-trivial monotone functions is {{math|Θ(''n''<sup>2</sup>)}}. The conjecture again remains unproven, but has been resolved for the property of containing a {{mvar|k}} clique for {{math|2 ≤ ''k'' ≤ ''n''}}. This property is known to have randomized decision tree complexity {{math|Θ(''n''<sup>2</sup>)}}.<ref>For instance, this follows from {{Harvtxt|Gröger|1992}}.</ref> For quantum decision trees, the best known lower bound is {{math|Ω(''n'')}}, but no matching algorithm is known for the case of {{math|''k'' ≥ 3}}.<ref>{{harvtxt|Childs|Eisenberg|2005}}; {{harvtxt|Magniez|Santha|Szegedy|2007}}.</ref>

===Fixed-parameter intractability===
[[Parameterized complexity]] is the [[computational complexity theory|complexity-theoretic]] study of problems that are naturally equipped with a small integer parameter {{mvar|k}} and for which the problem becomes more difficult as {{mvar|k}} increases, such as finding {{mvar|k}}-cliques in graphs. A problem is said to be fixed-parameter tractable if there is an algorithm for solving it on inputs of size {{mvar|n}}, and a function {{mvar|f}}, such that the algorithm runs in time {{math|''f''(''k'')&nbsp;''n''<sup>{{italics correction|''O''}}(1)</sup>}}. That is, it is fixed-parameter tractable if it can be solved in polynomial time for any fixed value of {{mvar|k}} and moreover if the exponent of the polynomial does not depend on {{mvar|k}}.<ref>{{harvtxt|Downey|Fellows|1999}}. Technically, there is usually an additional requirement that {{mvar|f}} be a [[computable function]].</ref>

For finding {{mvar|k}}-vertex cliques, the brute force search algorithm has running time {{math|O(''n''<sup>''k''</sup>''k''<sup>2</sup>)}}. Because the exponent of {{mvar|n}} depends on {{mvar|k}}, this algorithm is not fixed-parameter tractable.
Although it can be improved by fast matrix multiplication the running time still has an exponent that is linear in {{mvar|k}} Thus, although the running time of known algorithms for the clique problem is polynomial for any fixed {{mvar|k}}, these algorithms do not suffice for fixed-parameter tractability. {{harvtxt|Downey|Fellows|1995}} defined a hierarchy of parametrized problems, the W hierarchy, that they conjectured did not have fixed-parameter tractable algorithms. They proved that independent set (or, equivalently, clique) is hard for the first level of this hierarchy, [[W(1)|W[1]]]. Thus, according to their conjecture, clique has no fixed-parameter tractable algorithm. Moreover, this result provides the basis for proofs of W[1]-hardness of many other problems, and thus serves as an analogue of the [[Cook–Levin theorem]] for parameterized complexity.{{sfnp|Downey|Fellows|1995}}

{{harvtxt|Chen|Huang|Kanj|Xia|2006}} showed that finding {{mvar|k}}-vertex cliques cannot be done in time {{math|''n''<sup>''o''(''k'')</sup>}} unless the [[exponential time hypothesis]] fails. Again, this provides evidence that no fixed-parameter tractable algorithm is possible.{{sfnp|Chen|Huang|Kanj|Xia|2006}}

Although the problems of listing maximal cliques or finding maximum cliques are unlikely to be fixed-parameter tractable with the parameter {{mvar|k}}, they may be fixed-parameter tractable for other parameters of instance complexity. For instance, both problems are known to be fixed-parameter tractable when parametrized by the [[degeneracy (graph theory)|degeneracy]] of the input graph.<ref name="ELS10">{{harvtxt|Eppstein|Löffler|Strash|2013}}.</ref>

===Hardness of approximation===
[[File:Cube-face-intersection-graph.svg|thumb|A graph of compatibility relations among 2-bit samples of 3-bit proof strings. Each maximal clique (triangle) in this graph represents all ways of sampling a single 3-bit string. The proof of inapproximability of the clique problem involves [[induced subgraph]]s of analogously defined graphs for larger numbers of bits.]]
Weak results hinting that the clique problem might be hard to approximate have been known for a long time. {{harvtxt|Garey|Johnson|1978}} observed that, because the clique number takes on small integer values and is NP-hard to compute, it cannot have a [[Polynomial-time approximation scheme|fully polynomial-time approximation scheme]]. If too accurate an approximation were available, rounding its value to an integer would give the exact clique number. However, little more was known until the early 1990s, when several authors began to make connections between the approximation of maximum cliques and [[probabilistically checkable proof]]s. They used these connections to prove [[hardness of approximation]] results for the maximum clique problem.<ref>{{harvtxt|Kolata|1990}}; {{harvtxt|Feige|Goldwasser|Lovász|Safra|1991}}; {{harvtxt|Arora|Safra|1998}}; {{harvtxt|Arora|Lund|Motwani|Sudan|1998}}.</ref>
After many improvements to these results it is now known that, for every [[real number]] {{math|''ε''&nbsp;>&nbsp;0}}, there can be no polynomial time algorithm that approximates the maximum clique to within a factor better than {{math|{{italics correction|''O''}}(''n''<sup>1&nbsp;&minus;&nbsp;''ε''</sup>)}}, unless [[P versus NP problem|P = NP]].<ref>{{harvtxt|Håstad|1999}} showed inapproximability for this ratio using a stronger complexity theoretic assumption, the inequality of [[NP (complexity)|NP]] and [[ZPP (complexity)|ZPP]]. {{harvtxt|Khot|2001}} described more precisely the inapproximability ratio, but with an even stronger assumption. {{harvtxt|Zuckerman|2006}} [[derandomization|derandomized]] the construction weakening its assumption to P&nbsp;≠&nbsp;NP.</ref>

The rough idea of these inapproximability results is to form a graph that represents a probabilistically checkable proof system for an NP-complete problem such as the Boolean satisfiability problem. In a probabilistically checkable proof system, a proof is represented as a sequence of bits. An instance of the satisfiability problem should have a valid proof if and only if it is satisfiable. The proof is checked by an algorithm that, after a polynomial-time computation on the input to the satisfiability problem, chooses to examine a small number of randomly chosen positions of the proof string. Depending on what values are found at that sample of bits, the checker will either accept or reject the proof, without looking at the rest of the bits. False negatives are not allowed: a valid proof must always be accepted. However, an invalid proof may sometimes mistakenly be accepted. For every invalid proof, the probability that the checker will accept it must be low.<ref name="inapprox-redux"/>

To transform a probabilistically checkable proof system of this type into a clique problem, one forms a graph with a vertex for each possible accepting run of the proof checker. That is, a vertex is defined by one of the possible random choices of sets of positions to examine, and by bit values for those positions that would cause the checker to accept the proof. It can be represented by a [[partial word]] with a 0 or 1 at each examined position and a [[wildcard character]] at each remaining position. Two vertices are adjacent, in this graph, if the corresponding two accepting runs see the same bit values at every position they both examine. Each (valid or invalid) proof string corresponds to a clique, the set of accepting runs that see that proof string, and all maximal cliques arise in this way. One of these cliques is large if and only if it corresponds to a proof string that many proof checkers accept. If the original satisfiability instance is satisfiable, it will have a valid proof string, one that is accepted by all runs of the checker, and this string will correspond to a large clique in the graph. However, if the original instance is not satisfiable, then all proof strings are invalid, each proof string has only a small number of checker runs that mistakenly accept it, and all cliques are small. Therefore, if one could distinguish in polynomial time between graphs that have large cliques and graphs in which all cliques are small, or if one could accurately approximate the clique problem, then applying this approximation to the graphs generated from satisfiability instances would allow satisfiable instances to be distinguished from unsatisfiable instances. However, this is not possible unless P&nbsp;=&nbsp;NP.<ref name="inapprox-redux">This reduction is originally due to {{harvtxt|Feige|Goldwasser|Lovász|Safra|1991}} and used in all subsequent inapproximability proofs; the proofs differ in the strengths and details of the probabilistically checkable proof systems that they rely on.</ref>
{{Clear}}

==Notes==
{{Reflist|30em}}

==References==

===Surveys and textbooks===
{{refbegin|30em}}
*{{citation |title=Computational Complexity: A Modern Approach |first1=Sanjeev |last1=Arora |author1-link=Sanjeev Arora |first2=Boaz|last2=Barak|publisher=Cambridge University Press|year=2009|isbn= 978-0-521-42426-4}}.
*{{citation
 | last1 = Blair | first1 = Jean R. S.
 | last2 = Peyton | first2 = Barry
 | contribution = An introduction to chordal graphs and clique trees
 | doi = 10.1007/978-1-4613-8369-7_1
 | mr = 1320296
 | pages = 1–29
 | publisher = Springer, New York
 | series = IMA Vol. Math. Appl.
 | title = Graph theory and sparse matrix computation
 | volume = 56
 | year = 1993| url = https://digital.library.unt.edu/ark:/67531/metadc1319152/
 }}.
*{{citation |first1=I. M. |last1=Bomze |first2=M. |last2=Budinich |first3=P. M. |last3=Pardalos |first4=M. |last4=Pelillo |contribution=The maximum clique problem |title=Handbook of Combinatorial Optimization |volume=4 |pages=1–74 |publisher=Kluwer Academic Publishers |year=1999 |citeseerx=10.1.1.48.4074 }}.
*{{citation
 | last1 = Cormen | first1 = Thomas H. | author1-link = Thomas H. Cormen
 | last2 = Leiserson | first2 = Charles E. | author2-link = Charles E. Leiserson
 | last3 = Rivest | first3 = Ronald L. | author3-link = Ron Rivest
 | last4 = Stein | first4 = Clifford | author4-link = Clifford Stein
 | contribution = 34.5.1 The clique problem
 | edition = 2nd
 | isbn = 0-262-03293-7
 | pages = 1003–1006
 | publisher = MIT Press and McGraw-Hill
 | title = Introduction to Algorithms
 | year = 2001| title-link = Introduction to Algorithms }}.
*{{citation |first1=R. G. |last1=Downey |author2-link=Michael Fellows |first2=M. R. |last2=Fellows |title=Parameterized complexity | publisher=[[Springer-Verlag]] | year=1999 |isbn = 0-387-94883-X}}.
*{{citation |first=M. C. |last=Golumbic |author-link=Martin Charles Golumbic |title=Algorithmic Graph Theory and Perfect Graphs |series=Computer Science and Applied Mathematics |publisher=[[Academic Press]] |year=1980 |isbn=0-444-51530-5}}.
*{{citation |first1=M. |last1=Grötschel | author1-link = Martin Grötschel |first2=L. |last2=Lovász |author2-link=László Lovász |first3=A. |last3=Schrijver|author3-link=Alexander Schrijver |title=Geometric Algorithms and Combinatorial Optimization |series=Algorithms and Combinatorics |volume=2 |publisher=[[Springer-Verlag]] |year=1988 |contribution=9.4 Coloring Perfect Graphs |pages=296–298 |isbn=0-387-13624-X}}.
*{{citation |first=G. |last=Gutin |contribution=5.3 Independent sets and cliques |title=Handbook of graph theory |editor1-first=J. L. |editor1-last=Gross |editor2-first=J. |editor2-last=Yellen |publisher=CRC Press |year=2004 |isbn=978-1-58488-090-5 |pages=389–402 |series=Discrete Mathematics & Its Applications}}.
*{{citation
 | last1 = Muegge | first1 = Ingo
 | last2 = Rarey | first2 = Matthias
 | doi = 10.1002/0471224413.ch1
 | isbn = 9780471398455
 | journal = Reviews in Computational Chemistry
 | pages = 1–60
 | title = Small molecule docking and scoring
 | volume = 17
 | year = 2001}}.
*{{citation
 | author = National Research Council Committee on Mathematical Challenges from Computational Chemistry
 | doi = 10.17226/4886
 | isbn = 978-0-309-05097-5
 | publisher = National Academies Press
 | title = Mathematical Challenges from Theoretical/Computational Chemistry
 | year = 1995| url = https://digital.library.unt.edu/ark:/67531/metadc709300/
 }}.
*{{citation
 | last = Pelillo | first = Marcello
 | contribution = Heuristics for maximum clique and independent set
 | doi = 10.1007/978-0-387-74759-0_264
 | pages = 1508–1520
 | publisher = Springer
 | title = Encyclopedia of Optimization
 | year = 2009}}.
*{{citation
 | last = Plummer | first = Michael D. | author-link = Michael D. Plummer
 | issue = 3
 | journal = Quaestiones Mathematicae
 | mr = 1254158
 | pages = 253–287
 | title = Well-covered graphs: a survey
 | url = http://handle.dtic.mil/100.2/ADA247861
 | volume = 16
 | year = 1993
 | doi=10.1080/16073606.1993.9631737}}.
*{{citation |first=M. |last=Sipser |author-link=Michael Sipser |title=Introduction to the Theory of Computation |publisher=[[The Thomson Corporation|International Thompson Publishing]] |year=1996 |isbn=0-534-94728-X|title-link=Introduction to the Theory of Computation }}.
*{{citation|title=The Algorithm Design Manual|first=Steven S.|last=Skiena|author-link=Steven Skiena|edition=2nd|publisher=Springer|year=2009|isbn=978-1-84800-070-4}}.
*{{citation
 | last = Valiente | first = Gabriel
 | contribution = Chapter 6: Clique, Independent Set, and Vertex Cover
 | doi = 10.1007/978-3-662-04921-1_6
 | pages = 299–350
 | publisher = Springer
 | title = Algorithms on Trees and Graphs
 | year = 2002}}.
*{{citation|title=Social Network Analysis: Methods and Applications|volume=8|series=Structural Analysis in the Social Sciences|first1=Stanley|last1=Wasserman|author1-link=Stanley Wasserman|first2=Katherine|last2=Faust|publisher=Cambridge University Press|year=1994|isbn=978-0-521-38707-1|page=276|url=https://books.google.com/books?id=CAm2DpIqRUIC&pg=PA276}}.
{{refend}}

===Popular press===
{{refbegin}}
*{{citation |title=In a Frenzy, Math Enters Age of Electronic Mail |first=Gina |last=Kolata |journal=[[The New York Times]] |url=https://www.nytimes.com/1990/06/26/science/in-a-frenzy-math-enters-age-of-electronic-mail.html |date=June 26, 1990}}.
{{refend}}

===Research articles===
{{refbegin|30em}}
*{{citation |last1=Abello |first1=J. |last2=Pardalos |first2=P. M. |last3=Resende |first3=M. G. C. |contribution=On maximum clique problems in very large graphs |title=External Memory Algorithms |editor1-first=J. |editor1-last=Abello |editor2-first=J. |editor2-last=Vitter |editor2-link=Jeffrey Vitter |series=DIMACS Series on Discrete Mathematics and Theoretical Computer Science |volume=50 |pages=119–130 |year=1999 |publisher=[[American Mathematical Society]] |contribution-url=http://www.mgvis.com/Papers/MassiveDataSets/Cliques.pdf |isbn=0-8218-1184-3 }}.
*{{citation |first1=N. |last1=Alon |author1-link=Noga Alon |first2=R. |last2=Boppana |title=The monotone circuit complexity of boolean functions |journal=[[Combinatorica]] |volume=7 |issue=1 |year=1987 |pages=1–22 |doi=10.1007/BF02579196|s2cid=17397273 }}.
*{{citation |first1=N. |last1=Alon |author1-link=Noga Alon |first2=M. |last2=Krivelevich |first3=B. |last3=Sudakov |title=Finding a large hidden clique in a random graph |journal=Random Structures & Algorithms |volume=13 |issue=3–4 |year=1998 |pages=457–466 |doi=10.1002/(SICI)1098-2418(199810/12)13:3/4<457::AID-RSA14>3.0.CO;2-W}}.
*{{citation | last1 = Alon | first1 = N. | author1-link = Noga Alon | last2 = Yuster | first2 = R. | last3 = Zwick | first3 = U. | author3-link = Uri Zwick | contribution = Finding and counting given length cycles | pages = 354–364 | title = Proceedings of the 2nd European Symposium on Algorithms, Utrecht, The Netherlands | year = 1994}}.
*{{citation
 | last1 = Amano | first1 = Kazuyuki
 | last2 = Maruoka | first2 = Akira
 | doi = 10.1137/S0097539701396959
 | issue = 1
 | journal = [[SIAM Journal on Computing]]
 | mr = 2178806
 | pages = 201–216
 | title = A superpolynomial lower bound for a circuit computing the clique function with at most {{math|(1/6)log log ''N''}} negation gates
 | volume = 35
 | year = 2005}}.
*{{citation |title=Proof verification and the hardness of approximation problems |first1=Sanjeev |last1=Arora |author1-link=Sanjeev Arora |first2=Carsten |last2=Lund |author2-link=Carsten Lund |first3=Rajeev |last3=Motwani |author3-link=Rajeev Motwani |first4=Madhu |last4=Sudan |author4-link=Madhu Sudan |first5=Mario |last5=Szegedy |author5-link=Mario Szegedy |journal=[[Journal of the ACM]] |volume=45 |issue=3 |year=1998 |pages=501–555 |doi=10.1145/278298.278306 |s2cid=8561542 |id={{ECCC|1998|98|008}}}}. Originally presented at the 1992 [[Symposium on Foundations of Computer Science]], {{doi|10.1109/SFCS.1992.267823}}.
*{{citation |first1=S. |last1=Arora |author1-link=Sanjeev Arora |first2=S. |last2=Safra |author2-link=Shmuel Safra |title=Probabilistic checking of proofs: A new characterization of NP |journal=[[Journal of the ACM]] |volume=45 |issue=1 |year=1998 |pages=70–122 |doi=10.1145/273865.273901|s2cid=751563 }}. Originally presented at the 1992 [[Symposium on Foundations of Computer Science]], {{doi|10.1109/SFCS.1992.267824}}.
*{{citation |last1=Balas |first1=E. |last2=Yu |first2=C. S. |title=Finding a maximum clique in an arbitrary graph |journal=[[SIAM Journal on Computing]] |volume=15 |issue=4 |year=1986 |pages=1054–1068 |doi=10.1137/0215075}}.
*{{citation
 | last1 = Barrow | first1 = H.
 | last2 = Burstall | first2 = R. | author2-link = Rod Burstall
 | doi = 10.1016/0020-0190(76)90049-1
 | issue = 4
 | journal = Information Processing Letters
 | pages = 83–84
 | title = Subgraph isomorphism, matching relational structures and maximal cliques
 | volume = 4
 | year = 1976}}.
*{{citation |last1=Battiti |first1=R. |last2=Protasi |first2=M. |title=Reactive local search for the maximum clique problem |journal=[[Algorithmica]] |volume=29 |issue=4 |year=2001 |pages=610–637 |doi=10.1007/s004530010074|s2cid=1800512 }}.
*{{Citation | last1=Bollobás | first1=Béla | author1-link=Béla Bollobás | title=Complete subgraphs are elusive | year=1976 | journal=[[Journal of Combinatorial Theory]] | series = Series B | issn=0095-8956 | volume=21 | issue=1 | pages=1–7 | doi=10.1016/0095-8956(76)90021-6| doi-access=free }}.
*{{citation |first1=R. |last1=Boppana |first2=M. M. |last2=Halldórsson |title=Approximating maximum independent sets by excluding subgraphs |journal=[[BIT Numerical Mathematics]] |volume=32 |year=1992 |pages=180–196 |doi=10.1007/BF01994876 |issue=2|s2cid=123335474 }}.
*{{citation | last1=Bron | first1=C. | last2=Kerbosch | first2=J. | title=Algorithm 457: finding all cliques of an undirected graph | year=1973 | journal=[[Communications of the ACM]] | doi=10.1145/362342.362367 | volume=16 | issue=9 | pages=575–577| s2cid=13886709 }}.
*{{citation |last1=Carraghan |first1=R. |last2=Pardalos |first2=P. M. |title=An exact algorithm for the maximum clique problem |journal=Operations Research Letters |volume=9 |year=1990 |pages=375–382 |issue=6 |doi=10.1016/0167-6377(90)90057-C}}.
*{{citation | last1=Cazals | first1=F. | last2=Karande | first2=C. | title=A note on the problem of reporting maximal cliques | year=2008 | journal=[[Theoretical Computer Science (journal)|Theoretical Computer Science]] | volume=407 | issue=1 | pages=564–568 | doi=10.1016/j.tcs.2008.05.010 | doi-access=free }}.
*{{citation |first1=Jianer | last1=Chen |first2=Xiuzhen | last2=Huang |first3=Iyad A. | last3=Kanj |first4=Ge | last4=Xia | title=Strong computational lower bounds via parameterized complexity | journal=[[Journal of Computer and System Sciences]] | volume=72 | year=2006 | pages=1346–1367 | doi=10.1016/j.jcss.2006.04.007 | issue=8}}
*{{citation |first1=N. |last1=Chiba |first2=T. |last2=Nishizeki | author2-link = Takao Nishizeki |title=Arboricity and subgraph listing algorithms |journal=[[SIAM Journal on Computing]] |volume=14 |issue=1 |pages=210–223 |year=1985 |doi=10.1137/0214017}}.
*{{citation |last1=Childs |first1=A. M. |last2=Farhi |first2=E. |last3=Goldstone |first3=J. |author3-link=Jeffrey Goldstone |last4=Gutmann |first4=S. |title=Finding cliques by quantum adiabatic evolution |journal=Quantum Information and Computation |volume=2 |issue=3 |pages=181–191 |year=2002 |arxiv=quant-ph/0012104 |bibcode=2000quant.ph.12104C |doi=10.26421/QIC2.3 |s2cid=33643794 }}.
*{{citation |last1=Childs |first1=A. M. |last2=Eisenberg |first2=J. M. |title=Quantum algorithms for subset finding |journal=Quantum Information and Computation |volume=5 |issue=7 |pages=593–604 |year=2005 |arxiv=quant-ph/0311038|bibcode=2003quant.ph.11038C |doi=10.26421/QIC5.7 |s2cid=37556989 }}.
*{{citation | last1 = Clark | first1 = Brent N. | last2 = Colbourn | first2 = Charles J. | author2-link= Charles Colbourn | author3-link = David S. Johnson | last3 = Johnson | first3 = David S. | title = Unit disk graphs | journal = [[Discrete Mathematics (journal)|Discrete Mathematics]] | volume = 86 | issue = 1–3 | year = 1990 | pages = 165–177 | doi = 10.1016/0012-365X(90)90358-O| doi-access = free }}
*{{citation |first=S. A. |last=Cook |author-link=Stephen Cook |year=1971 |title=Proc. 3rd ACM Symposium on Theory of Computing |pages=151–158 |contribution-url=http://4mhz.de/cook.html |doi=10.1145/800157.805047 |contribution=The complexity of theorem-proving procedures |title-link=Symposium on Theory of Computing |s2cid=7573663 }}.
*{{citation
 | last = Cook | first = Stephen A. | author-link = Stephen Cook
 | doi = 10.1016/S0019-9958(85)80041-3
 | issue = 1–3
 | journal = [[Information and Control]]
 | mr = 837088
 | pages = 2–22
 | title = A taxonomy of problems with fast parallel algorithms
 | volume = 64
 | year = 1985| doi-access = free
 }}.
*{{citation |title=Computational complexity of inferring phylogenies by compatibility |first1=William H. E. |last1=Day |first2=David |last2=Sankoff |journal=[[Systematic Zoology]] |volume=35 |issue=2 |year=1986 |pages=224–229 |doi=10.2307/2413432 |jstor=2413432}}.
*{{citation |first1=R. G. |last1=Downey |author2-link=Michael Fellows |first2=M. R. |last2=Fellows |title=Fixed-parameter tractability and completeness. II. On completeness for W[1] |journal=[[Theoretical Computer Science (journal)|Theoretical Computer Science]] |volume=141 |issue=1–2 |year=1995 |pages=109–131 |doi=10.1016/0304-3975(94)00097-3}}.
*{{citation |first1=F. |last1=Eisenbrand |first2=F. |last2=Grandoni |title=On the complexity of fixed parameter clique and dominating set |journal=[[Theoretical Computer Science (journal)|Theoretical Computer Science]] |volume=326 |issue=1–3 |pages=57–67 |year=2004 |doi=10.1016/j.tcs.2004.05.009|doi-access=free }}.
*{{citation |first1=David |last1=Eppstein |author1-link=David Eppstein |first2=Maarten |last2=Löffler |first3=Darren |last3=Strash|title= Listing all maximal cliques in large sparse real-world graphs in near-optimal time|year=2013|journal=Journal of Experimental Algorithmics|volume=18|issue=3|page=3.1|doi=10.1145/2543629|arxiv=1103.0318|s2cid=47515491 }}.
*{{citation |first1=Paul |last1=Erdős |author1-link=Paul Erdős |first2=George |last2=Szekeres |author2-link=George Szekeres |title=A combinatorial problem in geometry |journal=[[Compositio Mathematica]] |volume=2 |year=1935 |pages=463–470 |url=http://www.renyi.hu/~p_erdos/1935-01.pdf }}.
*{{citation |first1=S. |last1=Even |author1-link=Shimon Even |first2=A. |last2=Pnueli |author2-link=Amir Pnueli |first3=A. |last3=Lempel |author3-link=Abraham Lempel |title=Permutation graphs and transitive graphs |journal=[[Journal of the ACM]] |volume=19 |issue=3 |pages=400–410 |year=1972 |doi=10.1145/321707.321710|s2cid=9501737 }}.
*{{citation |first=T. |last=Fahle |title=Proc. 10th European Symposium on Algorithms |series=Lecture Notes in Computer Science |publisher=Springer-Verlag |volume=2461 |year=2002 |pages=47–86 |doi=10.1007/3-540-45749-6_44 |chapter=Simple and fast: Improving a branch-and-bound algorithm for maximum clique |isbn=978-3-540-44180-9|title-link=European Symposium on Algorithms }}.
*{{citation |first=U. |last=Feige |author-link=Uriel Feige |title=Approximating maximum clique by removing subgraphs |journal=[[SIAM Journal on Discrete Mathematics]] |volume=18 |issue=2 |pages=219–225 |year=2004 |doi=10.1137/S089548010240415X}}.
*{{citation |first1=U. |last1=Feige |author1-link=Uriel Feige |first2=S. |last2=Goldwasser |author2-link=Shafi Goldwasser |first3=L. |last3=Lovász |author3-link=László Lovász |first4=S |last4=Safra |author4-link=Shmuel Safra |first5=M. |last5=Szegedy |author5-link=Mario Szegedy |title=Proc. 32nd IEEE Symp. on Foundations of Computer Science |pages=2–12 |year=1991 |doi=10.1109/SFCS.1991.185341 |chapter=Approximating clique is almost NP-complete |isbn=0-8186-2445-0|title-link=Symposium on Foundations of Computer Science |s2cid=46605913 }}.
*{{citation |first1=U. |last1=Feige |author1-link=Uriel Feige |first2=R. |last2=Krauthgamer |title=Finding and certifying a large hidden clique in a semirandom graph |journal=Random Structures and Algorithms |volume=16 |issue=2 |pages=195–208 |year=2000 |doi=10.1002/(SICI)1098-2418(200003)16:2<195::AID-RSA5>3.0.CO;2-A}}.
*{{citation
 | last1 = Frank | first1 = Ove
 | last2 = Strauss | first2 = David
 | issue = 395
 | journal = [[Journal of the American Statistical Association]]
 | mr = 860518
 | pages = 832–842
 | title = Markov graphs
 | jstor = 2289017
 | volume = 81
 | year = 1986
 | doi=10.2307/2289017}}.
*{{citation |first1=M. R. |last1=Garey |author1-link=Michael R. Garey |first2=D. S. |last2=Johnson |author2-link=David S. Johnson |title="Strong" NP-completeness results: motivation, examples and implications |journal=[[Journal of the ACM]] |volume=25 |pages=499–508 |year=1978 |doi=10.1145/322077.322090 |issue=3|s2cid=18371269 }}.
*{{citation
 | last1 = Garey | first1 = M. R. | author1-link = Michael R. Garey
 | last2 = Johnson | first2 = D. S. | author2-link = David S. Johnson
 | last3 = Stockmeyer | first3 = L. | author3-link = Larry Stockmeyer
 | doi = 10.1016/0304-3975(76)90059-1
 | issue = 3
 | journal = [[Theoretical Computer Science (journal)|Theoretical Computer Science]]
 | mr = 0411240
 | pages = 237–267
 | title = Some simplified NP-complete graph problems
 | volume = 1
 | year = 1976| doi-access = free
 }}.
*{{citation | last = Gavril | first = F. | doi = 10.1002/net.3230030305 | issue = 3 | journal = Networks | pages = 261–273 | title = Algorithms for a maximum clique and a maximum independent set of a circle graph | volume = 3 | year = 1973}}.
*{{citation |first1=M. |last1=Goldmann |first2=J. |last2=Håstad |author2-link=Johan Håstad |title=A simple lower bound for monotone clique using a communication game |journal=[[Information Processing Letters]] |volume=41 |issue=4 |year=1992 |pages=221–226 |doi=10.1016/0020-0190(92)90184-W |citeseerx=10.1.1.185.3065 |url=http://www.csc.kth.se/%7Ejohanh/monotoneclique.pdf }}.
*{{Citation | volume = 10 | issue = 3 | pages = 119&ndash;127 | last = Gröger | first = Hans Dietmar | title = On the randomized complexity of monotone graph properties | journal = Acta Cybernetica | access-date = 2009-10-02 | year = 1992 | url = http://www.inf.u-szeged.hu/actacybernetica/edb/vol10n3/pdf/Groger_1992_ActaCybernetica.pdf }}
*{{citation |first1=A. |last1=Grosso |first2=M. |last2=Locatelli |first3=F. |last3=Della Croce |title=Combining swaps and node weights in an adaptive greedy approach for the maximum clique problem |journal=Journal of Heuristics |volume=10 |issue=2 |year=2004 |pages=135–152 |doi=10.1023/B:HEUR.0000026264.51747.7f|s2cid=40764225 }}.
*{{citation |title=Approximations of Weighted Independent Set and Hereditary Subset Problems |first=M. M. |last=Halldórsson |journal=[[Journal of Graph Algorithms and Applications]] |volume=4 |issue=1 |pages=1–16 |year=2000 |doi=10.7155/jgaa.00020|doi-access=free }}.
*{{citation |last1=Hamzaoglu |first1=I. |last2=Patel |first2=J. H. |contribution=Test set compaction algorithms for combinational circuits |title=Proc. 1998 IEEE/ACM International Conference on Computer-Aided Design |year=1998 |pages=283–289 |doi=10.1145/288548.288615|s2cid=12258606 }}.
*{{citation |last1=Harary |first1=F. |author1-link=Frank Harary |last2=Ross |first2=I. C. |title=A procedure for clique detection using the group matrix |journal=Sociometry |volume=20 |year=1957 |pages=205–215 |doi=10.2307/2785673 |issue=3 |publisher=American Sociological Association |mr=0110590 |jstor=2785673}}.
*{{citation |first=J. |last=Håstad |author-link=Johan Håstad |title=Clique is hard to approximate within {{math|''n''<sup>1 &minus; ''ε''</sup>}} |journal=[[Acta Mathematica]] |volume=182 |issue=1 |pages=105–142 |year=1999 |doi=10.1007/BF02392825|doi-access=free }}.
*{{citation |first1=R. |last1=Impagliazzo |author1-link=Russell Impagliazzo |first2=R. |last2=Paturi |first3=F. |last3=Zane |title=Which problems have strongly exponential complexity? |journal=[[Journal of Computer and System Sciences]] |volume=63 |issue=4 |year=2001 |pages=512–530 |doi=10.1006/jcss.2001.1774|doi-access=free }}.
*{{citation |first1=A. |last1=Itai |first2=M. |last2=Rodeh |title=Finding a minimum circuit in a graph |journal=[[SIAM Journal on Computing]] |volume=7 |issue=4 |pages=413–423 |year=1978 |doi=10.1137/0207033}}.
*{{citation |first=M. |last=Jerrum |title=Large cliques elude the Metropolis process |journal=Random Structures and Algorithms |volume=3 |pages=347–359 |year=1992 |doi=10.1002/rsa.3240030402 |issue=4}}.
*{{Citation | last1=Jian | first1=T | title=An {{math|{{italics correction|''O''}}(2<sup>0.304''n''</sup>)}} algorithm for solving maximum independent set problem | publisher=IEEE Computer Society | year=1986 | journal=[[IEEE Transactions on Computers]] | issn=0018-9340 | volume=35 | issue=9 | pages=847–851 | doi=10.1109/TC.1986.1676847}}.
*{{citation |editor1-first=D. S. |editor1-last=Johnson |editor1-link=David S. Johnson |editor2-first=M. A. |editor2-last=Trick |editor2-link=Michael Trick |title=Cliques, Coloring, and Satisfiability: Second DIMACS Implementation Challenge, October 11–13, 1993 |series=DIMACS Series in Discrete Mathematics and Theoretical Computer Science |volume=26 |publisher=[[American Mathematical Society]] |url=http://dimacs.rutgers.edu/Volumes/Vol26.html |year=1996 |isbn=0-8218-6609-5 |author=<!-- this comment stops Citation bot adding incorrect info here--> }}.
*{{citation |first1=D. S. |last1=Johnson |author1-link=David S. Johnson |first2=M. |last2=Yannakakis |author2-link=Mihalis Yannakakis |title=On generating all maximal independent sets |journal=[[Information Processing Letters]] |volume=27 |year=1988 |pages=119–123 |issue=3 |doi=10.1016/0020-0190(88)90065-8}}.
*{{citation |last=Karp |first=Richard M. |author-link=Richard M. Karp |url=http://www.cs.berkeley.edu/~luca/cs172/karp.pdf |contribution=Reducibility among combinatorial problems |title=Complexity of Computer Computations |editor1-first=R. E. |editor1-last=Miller |editor2-first=J. W. |editor2-last=Thatcher |publisher=[[Plenum Publishing Corporation|Plenum]] |location=New York |pages=85–103 |year=1972 |access-date=2009-12-17 |archive-date=2011-06-29 |archive-url=https://web.archive.org/web/20110629023717/http://www.cs.berkeley.edu/~luca/cs172/karp.pdf |url-status=dead }}.
*{{citation | last=Karp |first=Richard M. |author-link=Richard M. Karp |contribution=Probabilistic analysis of some combinatorial search problems |title=Algorithms and Complexity: New Directions and Recent Results |editor-first=J. F. |editor-last=Traub |publisher=[[Academic Press]] |location=New York |year=1976 |pages=1–19}}.
*{{citation |first1=K. |last1=Katayama |first2=A. |last2=Hamamoto |first3=H. |last3=Narihisa |title=An effective local search for the maximum clique problem |journal=[[Information Processing Letters]] |volume=95 |issue=5 |year=2005 |pages=503–511 |doi=10.1016/j.ipl.2005.05.010}}.
*{{citation |first=S. |last=Khot |title=Proc. 42nd IEEE Symp. Foundations of Computer Science |pages=600–609 |year=2001 |doi=10.1109/SFCS.2001.959936 |chapter=Improved inapproximability results for MaxClique, chromatic number and approximate graph coloring |isbn=0-7695-1116-3|title-link=Symposium on Foundations of Computer Science |s2cid=11987483 }}.
*{{citation |first1=T. |last1=Kloks |first2=D. |last2=Kratsch |first3=H. |last3=Müller |title=Finding and counting small induced subgraphs efficiently |journal=[[Information Processing Letters]] |volume=74 |issue=3–4 |pages=115–121 |year=2000 |doi=10.1016/S0020-0190(00)00047-8}}.
*{{citation |first1=J. |last1=Konc |first2=D. |last2=Janežič |title=An improved branch and bound algorithm for the maximum clique problem |journal=MATCH Communications in Mathematical and in Computer Chemistry |volume=58 |issue=3 |pages=569–590 |year=2007 |url=http://insilab.org/articles/match2007.pdf }}. [http://insilab.org/maxclique Source code]
*{{citation |first1=F. S. |last1=Kuhl |first2=G. M. |last2=Crippen |first3=D. K. |last3=Friesen |year=1983 |title=A combinatorial algorithm for calculating ligand binding |journal=Journal of Computational Chemistry |doi=10.1002/jcc.540050105 |volume=5 |issue=1 |pages=24–34|s2cid=122923018 }}.
*{{Citation | last1=Lagarias | first1=Jeffrey C. | author1-link=Jeffrey Lagarias | last2=Shor |author2-link=Peter Shor| first2=Peter W. | title=Keller's cube-tiling conjecture is false in high dimensions | doi=10.1090/S0273-0979-1992-00318-X | mr = 1155280 | year=1992 | journal=[[Bulletin of the American Mathematical Society]] | series = New Series | volume=27 | issue=2 | pages=279–283| arxiv=math/9210222 | s2cid=6390600 }}.
*{{citation |last1=Lipton |first1=R. J. |author1-link=Richard J. Lipton |last2=Tarjan |first2=R. E. |author2-link=Robert Tarjan |title=Applications of a planar separator theorem |journal=[[SIAM Journal on Computing]] |volume=9 |issue=3 |pages=615–627 |year=1980 |doi=10.1137/0209046|s2cid=12961628 }}.
*{{citation
 | last1 = Liu | first1 = Yu
 | last2 = Lu | first2 = Jiaheng
 | last3 = Yang | first3 = Hua
 | last4 = Xiao | first4 = Xiaokui
 | last5 = Wei | first5 = Zhewei
 | contribution = Towards maximum independent sets on massive graphs
 | year = 2015
 | doi = 10.14778/2831360.2831366
 | issue = 13
 | pages = 2122–2133
 | series = Proceedings of the VLDB Endowment
 | title = Proceedings of the 41st International Conference on Very Large Data Bases (VLDB 2015)
 | volume = 8| hdl = 10138/157292
 | hdl-access = free
 }}.
*{{citation | last1 = Luce | first1 = R. Duncan | author1-link = R. Duncan Luce | last2 = Perry | first2 = Albert D. | title = A method of matrix analysis of group structure | journal = Psychometrika | volume = 14 | issue = 2 | year = 1949 | pages = 95–116 | doi = 10.1007/BF02289146 | pmid = 18152948| s2cid = 16186758 | hdl = 10.1007/BF02289146 | hdl-access = free }}.
*{{Citation | last1=Mackey | first1=John | title=A cube tiling of dimension eight with no facesharing | doi=10.1007/s00454-002-2801-9 | mr = 1920144 | year=2002 | journal=[[Discrete and Computational Geometry]] | volume=28 | issue=2 | pages=275–279| doi-access=free }}.
*{{citation | last1 = Magniez | first1 = Frédéric | last2 = Santha | first2 = Miklos | last3 = Szegedy | first3 = Mario | author-link3 = Mario Szegedy | title = Quantum algorithms for the triangle problem | year = 2007 | arxiv = quant-ph/0310134 | journal = [[SIAM Journal on Computing]] | volume = 37 | issue = 2 | pages = 413–424 | doi = 10.1137/050643684| s2cid = 594494 }}.
*{{citation |first=K. |last1=Makino |first2=T. |last2=Uno |contribution=New algorithms for enumerating all maximal cliques |title=Algorithm Theory: SWAT 2004 |series=Lecture Notes in Computer Science |publisher=[[Springer-Verlag]] |volume=3111 |year=2004 |pages=260–272 |doi=10.1007/978-3-540-27810-8_23 |citeseerx=10.1.1.138.705 |url=http://research.nii.ac.jp/~uno/papers/04swat.pdf }}.
*{{citation
 | last1 = Meka | first1 = Raghu
 | last2 = Potechin | first2 = Aaron
 | last3 = Wigderson | first3 = Avi | author3-link = Avi Wigderson
 | arxiv = 1503.06447
 | contribution = Sum-of-squares lower bounds for planted clique
 | doi = 10.1145/2746539.2746600
 | isbn = 978-1-4503-3536-2
 | location = New York, NY, USA
 | pages = 87–96
 | publisher = ACM
 | title = Proceedings of the Forty-Seventh Annual ACM on Symposium on Theory of Computing (STOC '15)
 | year = 2015| s2cid = 2754095
 }}.
*{{citation | last1 = Moon | first1 = J. W. | author2-link = Leo Moser | last2 = Moser | first2 = L. | title = On cliques in graphs | journal = [[Israel Journal of Mathematics]] | volume = 3 | year = 1965 | pages = 23–28 | mr = 0182577 | doi = 10.1007/BF02760024 | doi-access=free | s2cid = 9855414 }}.
*{{citation |author1-link=Jaroslav Nešetřil |first1=J. |last1=Nešetřil |first2=S. |last2=Poljak |title=On the complexity of the subgraph problem |journal=Commentationes Mathematicae Universitatis Carolinae |volume=26 |issue=2 |pages=415–419 |year=1985}}.
*{{citation |first=P. R. J. |last=Östergård |title=A fast algorithm for the maximum clique problem |journal=[[Discrete Applied Mathematics]] |volume=120 |issue=1–3 |year=2002 |pages=197–207 |doi=10.1016/S0166-218X(01)00290-6|doi-access=free }}.
*{{citation |last1=Ouyang |first1=Q. |last2=Kaplan |first2=P. D. |last3=Liu |first3=S. |last4=Libchaber |first4=A. |title=DNA solution of the maximal clique problem |journal=[[Science (journal)|Science]] |volume=278 |issue=5337 |pages=446–449 |pmid=9334300 |doi=10.1126/science.278.5337.446 |year=1997|bibcode=1997Sci...278..446O }}.
*{{citation
 | last1 = Papadimitriou | first1 = Christos H. | author1-link = Christos Papadimitriou
 | last2 = Yannakakis | first2 = Mihalis | author2-link = Mihalis Yannakakis
 | doi = 10.1016/0020-0190(81)90041-7
 | issue = 4–5
 | journal = [[Information Processing Letters]]
 | mr = 651460
 | pages = 131–133
 | title = The clique problem for planar graphs
 | volume = 13
 | year = 1981}}.
*{{citation |last1=Pardalos |first1=P. M. |last2=Rogers |first2=G. P. |title=A branch and bound algorithm for the maximum clique problem |journal=Computers & Operations Research |year=1992 |volume=19 |issue=5 |pages=363–375 |doi=10.1016/0305-0548(92)90067-F}}.
*{{citation |first=A. A. |last=Razborov |author-link=Alexander Razborov |title=Lower bounds for the monotone complexity of some Boolean functions |language=ru |journal=[[Proceedings of the USSR Academy of Sciences]] |volume=281 |year=1985 |pages=798–801 |postscript=. English translation in ''Sov. Math. Dokl.'' '''31''' (1985): 354–357}}.
*{{citation |first=J.-C. |last=Régin |contribution=Using constraint programming to solve the maximum clique problem |title=Proc. 9th Int. Conf. Principles and Practice of Constraint Programming – CP 2003 |year=2003 |doi=10.1007/978-3-540-45193-8_43 |series=Lecture Notes in Computer Science |publisher=[[Springer-Verlag]] |volume=2833 |pages=634–648}}.
*{{citation |first1=Nicholas |last1=Rhodes |first2=Peter |last2=Willett |first3=Alain |last3=Calvet |first4=James B. |last4=Dunbar |first5=Christine |last5=Humblet |journal=Journal of Chemical Information and Computer Sciences |volume=43 |issue=2 |pages=443–448 |year=2003 |doi=10.1021/ci025605o |pmid=12653507 |title=CLIP: similarity searching of 3D databases using clique detection}}.
*{{citation |first=J. M. |last=Robson |title=Algorithms for maximum independent sets |journal=Journal of Algorithms |volume=7 |year=1986 |pages=425–440 |issue=3 |doi=10.1016/0196-6774(86)90032-5}}.
*{{Citation | last1=Robson | first1=J. M. | title=Finding a maximum independent set in time ''{{math|{{italics correction|''O''}}(2<sup>''n''/4</sup>)}}'' | year=2001 | url=http://www.labri.fr/perso/robson/mis/techrep.html }}.
*{{citation |last1=Rosgen |first1=B |last2=Stewart |first2=L |year=2007 |title=Complexity results on graphs with few cliques |journal=Discrete Mathematics and Theoretical Computer Science |volume=9 |issue=1 |pages=127–136 |url=https://hal.inria.fr/hal-00966509 }}.
*{{citation |first1=Ram |last1=Samudrala |first2=John |last2=Moult |title=A graph-theoretic algorithm for comparative modeling of protein structure |journal=Journal of Molecular Biology |volume=279 |issue=1 |year=1998 |pages=287–302 |doi=10.1006/jmbi.1998.1689 |pmid=9636717}}.
*{{citation
 | last1 = Sethuraman | first1 = Samyukta
 | last2 = Butenko | first2 = Sergiy
 | doi = 10.1007/s10287-013-0197-z
 | issue = 1
 | journal = Computational Management Science
 | mr = 3296231
 | pages = 197–218
 | title = The maximum ratio clique problem
 | volume = 12
 | year = 2015| s2cid = 46153055
 }}.
*{{citation |first1=Y. |last1=Song |title=On the independent set problem in random graphs |journal=International Journal of Computer Mathematics |volume=92 |issue=11 |year=2015 |pages=2233–2242 |doi=10.1080/00207160.2014.976210 |s2cid=6713201 |url=https://zenodo.org/record/896067 }}.
*{{citation |first1=Victor |last1=Spirin |first2=Leonid A. |last2=Mirny |title=Protein complexes and functional modules in molecular networks |journal=[[Proceedings of the National Academy of Sciences]] |volume=100 |issue=21 |pages=12123–12128 |doi=10.1073/pnas.2032324100 |year=2003 |pmid=14517352 |pmc=218723|bibcode=2003PNAS..10012123S |doi-access=free }}.
*{{citation |first1=R. E. |last1=Tarjan |author1-link=Robert Tarjan |first2=A. E. |last2=Trojanowski |title=Finding a maximum independent set |journal=[[SIAM Journal on Computing]] |volume=6 |year=1977 |pages=537–546 |url=http://i.stanford.edu/pub/cstr/reports/cs/tr/76/550/CS-TR-76-550.pdf |doi=10.1137/0206038 |issue=3 }}.
*{{citation |first1=E. |last1=Tomita |first2=T. |last2=Kameda |title=An efficient branch-and-bound algorithm for finding a maximum clique with computational experiments |journal=Journal of Global Optimization |volume=37 |issue=1 |year=2007 |pages=95–111 |doi=10.1007/s10898-006-9039-7|s2cid=21436014 }}.
*{{citation |first1=E. |last1=Tomita |first2=T. |last2=Seki |title=Discrete Mathematics and Theoretical Computer Science |series=Lecture Notes in Computer Science |publisher=Springer-Verlag |volume=2731 |year=2003 |pages=[https://archive.org/details/discretemathemat0000dmtc/page/278 278–289] |doi=10.1007/3-540-45066-1_22 |chapter=An efficient branch-and-bound algorithm for finding a maximum clique |isbn=978-3-540-40505-4 |chapter-url=https://archive.org/details/discretemathemat0000dmtc/page/278 }}.
*{{citation |first1=E. |last1=Tomita |first2=A. |last2=Tanaka |first3=H. |last3=Takahashi |title=The worst-case time complexity for generating all maximal cliques and computational experiments |journal=[[Theoretical Computer Science (journal)|Theoretical Computer Science]] |volume=363 |issue=1 |pages=28–42 |year=2006 |doi=10.1016/j.tcs.2006.06.015|doi-access=free }}.
*{{citation |first1=S. |last1=Tsukiyama |first2=M. |last2=Ide |first3=I. |last3=Ariyoshi |first4=I. |last4=Shirakawa |title=A new algorithm for generating all the maximal independent sets |journal=[[SIAM Journal on Computing]] |volume=6 |year=1977 |pages=505–517 |doi=10.1137/0206036 |issue=3}}.
*{{citation |last=Valiant |first=L. G. |title=Proc. 15th ACM Symposium on Theory of Computing |year=1983 |pages=110–117 |doi=10.1145/800061.808739 |chapter=Exponential lower bounds for restricted monotone circuits |isbn=0-89791-099-0|title-link=Symposium on Theory of Computing |s2cid=6326587 }}.
*{{citation |first1=V. |last1=Vassilevska|author1-link= Virginia Vassilevska Williams |first2=R. |last2=Williams |author2-link=Ryan Williams (computer scientist) |title=Proc. 41st ACM Symposium on Theory of Computing |year=2009 |pages=455–464 |doi=10.1145/1536414.1536477 |chapter=Finding, minimizing, and counting weighted subgraphs |isbn=978-1-60558-506-2|citeseerx=10.1.1.156.345 |title-link=Symposium on Theory of Computing|s2cid=224579}}.
*{{citation |last=Wegener |first=I. |title=On the complexity of branching programs and decision trees for clique functions |journal=[[Journal of the ACM]] |volume=35 |issue=2 |pages=461–472 |year=1988 |doi=10.1145/42282.46161|s2cid=11967153 }}.
*{{citation |first=R. |last=Yuster |title=Finding and counting cliques and independent sets in ''r''-uniform hypergraphs |journal=[[Information Processing Letters]] |volume=99 |issue=4 |pages=130–134 |year=2006 |doi=10.1016/j.ipl.2006.04.005}}.
*{{citation |first=D. |last=Zuckerman |title=Proc. 38th ACM Symp. Theory of Computing |pages=681–690 |year=2006 |doi=10.1145/1132516.1132612 |id={{ECCC|2005|05|100}}|chapter=Linear degree extractors and the inapproximability of max clique and chromatic number |isbn=1-59593-134-1|title-link=Symposium on Theory of Computing |s2cid=5713815 }}.
{{refend}}

[[Category:NP-complete problems]]
[[Category:Computational problems in graph theory]]
